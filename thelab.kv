CanvasExample6:

# CanvasExample5:

# CanvasExample4: # unlike in his file, the declaration is required

#: set s dp(150) # this is how to declare variables

<CanvasExample6>:
    BoxLayout
        size: root.size # root.size will fill in the entire layout
        Widget:
            canvas:
                Color:
                    rgb: 0,1,0
                Rectangle:
                    size: self.size # self.size will just fill in the Widget
        RelativeLayout:
            canvas:
                Color:
                    rgb: 0,0,1
                Rectangle:
                    size: self.size
                    # pos: self.pos # this moves the rectangle (probably to the Widget itself)
                                    # the left one didn't need this, because the Widget defaults to 0, 0 (the bottom left corner).

    # Button:  # note that the order of instructions matters. The button is drawn first, then the rectangle overlays it.
    #    canvas:  # 'canvas.before' would place the rectangle on top of the button.
    #        Rectangle:
    #    text: "A"
    #    pos: 100, 100


<CanvasExample4>:
    Button:
        pos: 100, 400
        text: "A"
        on_press: root.on_button_a_click() # make sure to have this function in main.py

<CanvasExample3>:
    canvas:
        Color:  # color is an instruction, not a property.
            rgb: 1,0,0, .3  # color propogates down to the shapes below; code above it won't be affected.
                            # 4th input is the intensity, but decimal of 1.
        Line:
            circle: (200, 200, 100) # center x, center y, radius
            width: 2
        Line:
            ellipse: (500, 300, 100, 200) # center x, center y, radius_x, radius_y; the radii need to be different to actually create an elllipse
            width: 2
        Color:
            rgb: 0,0,1, .3
        Line:
            rectangle: (800, 100, 300, 200) # x, y, w, h;
            width: 2

<CanvasExample2>:
    canvas:
        Line: 
            points: (0, self.height/2, self.width, self.height/2)
            width: 2
        Line: 
            points: (self.width/2, self.height, self.width/2, 0)
            width: 2

<CanvasExample1>:
    canvas:      
        Rectangle:  
            pos: self.center_x-s/2, self.center_y-s/2 # centering is rooted at the bottom left, so we need to "help" it get to the true middle.
            size: s, s
        Ellipse:
            pos: 200, 500
            size: s, s/2 # cut the height in half to make an ellipse
        Line:
            points: (0, 0, self.width/4, 100, self.width/2, 0, self.width*3/4, 100, self.width, 0)  # a tuple to define segments (however many); (0,0) is the lower bottom left of the entire box
            width: 2                                                                                # self.width pushes it all the way to the extreme right.
                                                                                                    # this makes a responsive "springing" line
<ImagesExample@GridLayout>:
    cols: 3
    Image: 
        source: "images/cake.jpg"
    Image: 
        source: "images/cake.jpg"    
        allow_stretch: True
    Image: 
        source: "images/cake.jpg"
        allow_stretch: True
        keep_ratio: False  # this lines allows the aspect ratio to change (it needs allwo stretch to work)

<WidgetsExample>: # this simplifies placing numerous widgets in the grid.
    cols: 3
    ToggleButton: # like a button but an on/off state (Button has no state)
        text: "OFF"  # default display on the button itself
        on_state: root.on_toggle_button_state(self)  # notice that we toggle on the state
        size_hint: None, 1  # none for the width, and 100% (or full aspect) for the height.
        width: "100dp"     # hard coding the width in at 100dp
    Button:
        text: "Count"
        on_press: root.on_button_click()  # this method is from main.py. "root" focuses the method on WidgetsExample. "self" would make it the button itself.
        disabled: not root.count_enabled  # when this property is False (implemnted through the 'not'), then the button will be disabled. 
    Label:
        text: root.my_text # this is "binding" for this Label to 'my_text' (we seem to be using my_text as a variable for this property now.)
        font_name: "fonts/Lcd.ttf"
        font_size: "80dp"
        color: 1, .5, 1, 1  # 100% red, 50% green, 100% blue, 100% opaque 
    Switch:
        id: my_switch
        on_active: root.on_switch_active(self)# for some reason, it's not "on state."
        size_hint: None, 1  
        width: "100dp" 
        active: True # this makes Switch 'on' as the default. B/c of the binding, Slider will also be active as a default.
    Slider:
        id: my_slider # 'id' makes it possible to ue a variable inside the kivy file.
        min: 0      # default value
        max: 100    # defualt value
        value: 50   # this positions the slider to 50 upon starting
        # on_value: root.on_slider_value(self)  with the ID in palce, we don't need this line anymore.
        orientation: "vertical"
        disabled: not my_switch.active  # behavior of the Slider depends on Switch (when Switch is not active, Slider is disabled.)
    BoxLayout:  # this is a smaller unit that stacks the Label and the Progress Bar together.
        orientation: "vertical"
        Label:
            text: str(int(my_slider.value)) # this serves as the binding for the SLider widget (very efficient syntax)
        ProgressBar:
            max: 100  # default for min is 0 and it can't be changed.
            value: my_slider.value  # binds the Progress Bar to the Slider
    TextInput:
        id: my_text_input
        size_hint: None, 1  
        width: "100dp" 
        text: "foo"
        multiline: False  # the default is true
        on_text_validate: root.on_text_validate(self)
    Label:
        text: "Your name is: " + root.text_input_str # binds the label to the widget
                                                    # you can also concatenate strings within teh label

<PageLayoutExample@PageLayout>:
    MainWidget:    
    BoxLayoutExample:
    AnchorLayoutExample:
    GridLayoutExample:

<ScrollViewExample@ScrollView>: # this one is a view that can take on a child (in this case the stack layout)
    StackLayoutExample:
        size_hint: 1, None  # veritcal of 100% and none for horizontal
        height: self.minimum_height  # kivy calculates the height of the content for us

<StackLayoutExample>
    # in stack layout, options are left/right|right/left and top/bottom|bottom/top (notice the contraction below)
    # orientation: " rl-bt"
    # here's how to include padding around the entire set of buttons:
    # padding: ("20dp", "20dp", "20dp", "20dp") # it goes clockwise from the left.
    # spacing: "20dp", "20dp"

<GridLayoutExample@GridLayout>: # this is a direct invocation, so you don't need the Python code in the other file
    # rows
    # cols
    rows: 2
    Button:
        text: "A"
        size_hint: None, 1
        width: "60dp"
    BoxLayoutExample:
    #Button:
    #    text: "B"
    Button:
        text: "C"
    Button:
        text: "D"
        size_hint: None, 1
        width: "60dp"
    Button:
        text: "E"
    Button:
        text: "F"



<AnchorLayoutExample>:
    anchor_x: "center"  # right, left, center (center is the default)
    anchor_y: "top"  # bottom, top, center (center is the default)
    BoxLayout:
        size_hint: .2, .2
        Button:
            text: "A"
        
        Button:
            text: "B"


    # there is no stacking for widgets

<BoxLayoutExample>
    orientation: "horizontal"
    Button:
        text: "A"
        size_hint: .5, .5  # this gives 80% of the width and 50% of the height compared to the other buttons
        # size_hint: .5, None # these are relative. You want 100% of width
        height: "60dp" # here, you have fixed the height to 60dp, regardless of any shifts in the window.
        pos_hint: {"center_y": .5}  # on the x axis, you're "starting" at the 75% line (the middle). 
                                    # If you gave it "1," it would be completely outside the window.
    
    BoxLayout:
        orientation: "vertical"
        spacing: "10dp"
        Button:
            text: "B1"
        Button:
            text: "B2"
        Button:
            text: "B3"
        Button:
            text: "B4"

    Label:
        text: "C"

<MainWidget>:
    Button:
        text: "Hello"
        size: "100dp", "80dp"
        pos: "100dp", "200dp" # these are objective sizes, so you'll be able to use this code anywhere
        color: 0, 0, 1, 1 

    Label:
        text: "Hello2"
        size: "100dp", "80dp"
        pos: "200dp", "300dp" 
        color: 1, 0, 0, 1 # red, green, blue, opacity values